"""refactor_entity_inheritance_structure

Revision ID: 290bf9bbc390
Revises: 53d8bb845b30
Create Date: 2025-08-10 21:56:46.638728

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '290bf9bbc390'
down_revision: Union[str, Sequence[str], None] = '53d8bb845b30'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('embeddings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('entity_uuid', sa.UUID(), nullable=False),
    sa.Column('qdrant_point_id', sa.UUID(), nullable=False),
    sa.Column('embedding_type', sa.String(length=50), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=True),
    sa.Column('text_preview', sa.Text(), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('model_name', sa.String(length=100), nullable=True),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('metadata_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['entity_uuid'], ['entities.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('qdrant_point_id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index('idx_embeddings_entity_uuid', 'embeddings', ['entity_uuid'], unique=False)
    op.create_index('idx_embeddings_qdrant_point', 'embeddings', ['qdrant_point_id'], unique=False)
    op.create_index('idx_embeddings_type_chunk', 'embeddings', ['entity_uuid', 'embedding_type', 'chunk_index'], unique=False)
    op.drop_index(op.f('idx_vector_embeddings_entity'), table_name='vector_embeddings')
    op.drop_index(op.f('idx_vector_embeddings_qdrant'), table_name='vector_embeddings')
    op.drop_table('vector_embeddings')
    op.drop_constraint(op.f('certificates_entity_id_key'), 'certificates', type_='unique')
    op.drop_constraint(op.f('certificates_uuid_key'), 'certificates', type_='unique')
    op.create_foreign_key(None, 'certificates', 'entities', ['id'], ['id'])
    op.drop_column('certificates', 'uuid')
    op.drop_column('certificates', 'entity_id')
    op.drop_column('certificates', 'updated_at')
    op.drop_column('certificates', 'created_at')
    op.drop_constraint(op.f('custom_sections_entity_id_key'), 'custom_sections', type_='unique')
    op.drop_constraint(op.f('custom_sections_uuid_key'), 'custom_sections', type_='unique')
    op.create_foreign_key(None, 'custom_sections', 'entities', ['id'], ['id'])
    op.drop_column('custom_sections', 'uuid')
    op.drop_column('custom_sections', 'entity_id')
    op.drop_column('custom_sections', 'updated_at')
    op.drop_column('custom_sections', 'created_at')
    op.drop_constraint(op.f('education_entity_id_key'), 'education', type_='unique')
    op.drop_constraint(op.f('education_uuid_key'), 'education', type_='unique')
    op.create_foreign_key(None, 'education', 'entities', ['id'], ['id'])
    op.drop_column('education', 'uuid')
    op.drop_column('education', 'entity_id')
    op.drop_column('education', 'updated_at')
    op.drop_column('education', 'created_at')
    op.drop_constraint(op.f('generated_resumes_entity_id_key'), 'generated_resumes', type_='unique')
    op.drop_constraint(op.f('generated_resumes_uuid_key'), 'generated_resumes', type_='unique')
    op.create_foreign_key(None, 'generated_resumes', 'entities', ['id'], ['id'])
    op.drop_column('generated_resumes', 'uuid')
    op.drop_column('generated_resumes', 'entity_id')
    op.drop_column('generated_resumes', 'updated_at')
    op.drop_column('generated_resumes', 'created_at')
    op.drop_constraint(op.f('job_descriptions_entity_id_key'), 'job_descriptions', type_='unique')
    op.drop_constraint(op.f('job_descriptions_uuid_key'), 'job_descriptions', type_='unique')
    op.create_foreign_key(None, 'job_descriptions', 'entities', ['id'], ['id'])
    op.drop_column('job_descriptions', 'uuid')
    op.drop_column('job_descriptions', 'entity_id')
    op.drop_column('job_descriptions', 'updated_at')
    op.drop_column('job_descriptions', 'created_at')
    op.drop_constraint(op.f('languages_entity_id_key'), 'languages', type_='unique')
    op.drop_constraint(op.f('languages_uuid_key'), 'languages', type_='unique')
    op.create_foreign_key(None, 'languages', 'entities', ['id'], ['id'])
    op.drop_column('languages', 'uuid')
    op.drop_column('languages', 'entity_id')
    op.drop_column('languages', 'updated_at')
    op.drop_column('languages', 'created_at')
    op.drop_constraint(op.f('professional_summaries_entity_id_key'), 'professional_summaries', type_='unique')
    op.drop_constraint(op.f('professional_summaries_uuid_key'), 'professional_summaries', type_='unique')
    op.create_foreign_key(None, 'professional_summaries', 'entities', ['id'], ['id'])
    op.drop_column('professional_summaries', 'uuid')
    op.drop_column('professional_summaries', 'entity_id')
    op.drop_column('professional_summaries', 'updated_at')
    op.drop_column('professional_summaries', 'created_at')
    op.drop_constraint(op.f('profile_links_entity_id_key'), 'profile_links', type_='unique')
    op.drop_constraint(op.f('profile_links_uuid_key'), 'profile_links', type_='unique')
    op.create_foreign_key(None, 'profile_links', 'entities', ['id'], ['id'])
    op.drop_column('profile_links', 'uuid')
    op.drop_column('profile_links', 'entity_id')
    op.drop_column('profile_links', 'updated_at')
    op.drop_column('profile_links', 'created_at')
    op.drop_constraint(op.f('projects_entity_id_key'), 'projects', type_='unique')
    op.drop_constraint(op.f('projects_uuid_key'), 'projects', type_='unique')
    op.create_foreign_key(None, 'projects', 'entities', ['id'], ['id'])
    op.drop_column('projects', 'uuid')
    op.drop_column('projects', 'entity_id')
    op.drop_column('projects', 'updated_at')
    op.drop_column('projects', 'created_at')
    op.drop_constraint(op.f('skills_entity_id_key'), 'skills', type_='unique')
    op.drop_constraint(op.f('skills_uuid_key'), 'skills', type_='unique')
    op.create_foreign_key(None, 'skills', 'entities', ['id'], ['id'])
    op.drop_column('skills', 'uuid')
    op.drop_column('skills', 'entity_id')
    op.drop_column('skills', 'updated_at')
    op.drop_column('skills', 'created_at')
    op.drop_constraint(op.f('work_experiences_entity_id_key'), 'work_experiences', type_='unique')
    op.drop_constraint(op.f('work_experiences_uuid_key'), 'work_experiences', type_='unique')
    op.create_foreign_key(None, 'work_experiences', 'entities', ['id'], ['id'])
    op.drop_column('work_experiences', 'uuid')
    op.drop_column('work_experiences', 'entity_id')
    op.drop_column('work_experiences', 'updated_at')
    op.drop_column('work_experiences', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('work_experiences', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('work_experiences', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('work_experiences', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('work_experiences', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'work_experiences', type_='foreignkey')
    op.create_unique_constraint(op.f('work_experiences_uuid_key'), 'work_experiences', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('work_experiences_entity_id_key'), 'work_experiences', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('skills', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('skills', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('skills', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('skills', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'skills', type_='foreignkey')
    op.create_unique_constraint(op.f('skills_uuid_key'), 'skills', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('skills_entity_id_key'), 'skills', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('projects', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'projects', type_='foreignkey')
    op.create_unique_constraint(op.f('projects_uuid_key'), 'projects', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('projects_entity_id_key'), 'projects', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('profile_links', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('profile_links', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('profile_links', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('profile_links', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'profile_links', type_='foreignkey')
    op.create_unique_constraint(op.f('profile_links_uuid_key'), 'profile_links', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('profile_links_entity_id_key'), 'profile_links', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('professional_summaries', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('professional_summaries', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('professional_summaries', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('professional_summaries', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'professional_summaries', type_='foreignkey')
    op.create_unique_constraint(op.f('professional_summaries_uuid_key'), 'professional_summaries', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('professional_summaries_entity_id_key'), 'professional_summaries', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('languages', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('languages', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('languages', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('languages', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'languages', type_='foreignkey')
    op.create_unique_constraint(op.f('languages_uuid_key'), 'languages', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('languages_entity_id_key'), 'languages', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('job_descriptions', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('job_descriptions', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('job_descriptions', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('job_descriptions', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'job_descriptions', type_='foreignkey')
    op.create_unique_constraint(op.f('job_descriptions_uuid_key'), 'job_descriptions', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('job_descriptions_entity_id_key'), 'job_descriptions', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('generated_resumes', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('generated_resumes', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('generated_resumes', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('generated_resumes', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'generated_resumes', type_='foreignkey')
    op.create_unique_constraint(op.f('generated_resumes_uuid_key'), 'generated_resumes', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('generated_resumes_entity_id_key'), 'generated_resumes', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('education', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('education', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('education', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('education', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'education', type_='foreignkey')
    op.create_unique_constraint(op.f('education_uuid_key'), 'education', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('education_entity_id_key'), 'education', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('custom_sections', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('custom_sections', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('custom_sections', sa.Column('entity_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('custom_sections', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'custom_sections', type_='foreignkey')
    op.create_unique_constraint(op.f('custom_sections_uuid_key'), 'custom_sections', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('custom_sections_entity_id_key'), 'custom_sections', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.add_column('certificates', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('certificates', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('certificates', sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('certificates', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'certificates', type_='foreignkey')
    op.create_unique_constraint(op.f('certificates_uuid_key'), 'certificates', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('certificates_entity_id_key'), 'certificates', ['entity_id'], postgresql_nulls_not_distinct=False)
    op.create_table('vector_embeddings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('qdrant_point_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata_json', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('embedding_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('vector_embeddings_pkey')),
    sa.UniqueConstraint('qdrant_point_id', name=op.f('vector_embeddings_qdrant_point_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name=op.f('vector_embeddings_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_vector_embeddings_qdrant'), 'vector_embeddings', ['qdrant_point_id'], unique=False)
    op.create_index(op.f('idx_vector_embeddings_entity'), 'vector_embeddings', ['entity_id'], unique=False)
    op.drop_index('idx_embeddings_type_chunk', table_name='embeddings')
    op.drop_index('idx_embeddings_qdrant_point', table_name='embeddings')
    op.drop_index('idx_embeddings_entity_uuid', table_name='embeddings')
    op.drop_table('embeddings')
    op.drop_table('entities')
    # ### end Alembic commands ###
